'''
通れる場所を0
壁を9として通れないようにする。
ゴールを1とする。
迷路の外側は全て壁に覆われているとする。
'''

meiro = [
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    [9, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 9],
    [9, 0, 9, 0, 0, 0, 9, 9, 0, 9, 9, 9],
    [9, 0, 9, 9, 0, 9, 0, 0, 0, 9, 0, 9],
    [9, 0, 0, 0, 9, 0, 0, 9, 9, 0, 9, 9],
    [9, 9, 9, 0, 0, 9, 0, 9, 0, 0, 0, 9],
    [9, 0, 0, 0, 9, 0, 9, 0, 0, 9, 1, 9],
    [9, 0, 9, 0, 0, 0, 0, 9, 0, 0, 9, 9],
    [9, 0, 0, 9, 0, 9, 0, 0, 9, 0, 0, 9],
    [9, 0, 9, 0, 9, 0, 9, 0, 0, 9, 0, 9],
    [9, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 9],
    [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]
]

print(meiro[6][-2])
#スタート位置（x座標, y座標, 移動回数）をセット
position = [[1, 1, 0]]

#もしポジションにリストが入っていたら
while len(position) > 0:
    x, y, depth = position.pop(0)

    # ゴールに着くと終了
    if meiro[x][y] == 1:
        print(depth)
        break

    # 探索済みとしてセット
    meiro[x][y] = 2

    # 上下左右を探索 
    if meiro[x - 1][y] < 2: 
        position.append([x - 1, y, depth + 1])
    if meiro[x + 1][y] < 2:
        position.append([x + 1, y, depth + 1])
    if meiro[x][y - 1] < 2:
        position.append([x,   y + 1, depth + 1])
    if meiro[x][y + 1] < 2:
        position.append([x,   y+  1, depth + 1])


